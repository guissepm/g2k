pipeline {
    agent any

    environment {
        DEPLOY_USER = 'vagrant'
        DEPLOY_HOST = '192.168.56.5'
        APP_DIR = '/home/vagrant/webapp'
        IMAGE_NAME = 'static-website'
        IMAGE_TAG = 'latest'
        INTERNAL_PORT = '80'
        REMOTE_PORT = '80'
        DOCKERHUB_ID = 'guissepm'
        SSH_KEY_CREDENTIALS_ID = 'my-ssh-key'
        DOCKERHUB_CREDENTIALS_ID = 'dockerhub_creds' 
        DEPLOY_URL = "http://${DEPLOY_HOST}:${REMOTE_PORT}/"
        CONTAINER_IMAGE = "${DOCKERHUB_ID}/${IMAGE_NAME}:${IMAGE_TAG}"
    }

    stages {
        stage('Clone GitLab Repo') {
            steps {
                echo "üì• Cloning or updating GitLab private repo..."
                withCredentials([usernamePassword(credentialsId: 'webapp2k-atoken', usernameVariable: 'GITLAB_USER', passwordVariable: 'GITLAB_PASS')]) {
                    sh '''
                        if [ -d "webappg2k/.git" ]; then
                            echo "Repo exists, pulling latest changes..."
                            cd webappg2k && git pull
                        else
                            echo "Repo not found, cloning..."
                            git clone http://${GITLAB_USER}:${GITLAB_PASS}@192.168.56.16/root/webappg2k.git
                        fi
                    '''
                }
            }
        }

        stage('Transfer & Build on Remote') {
            steps {
                echo "üì¶ Transferring files to ${DEPLOY_HOST} and building image..."
                sshagent(credentials: ["${SSH_KEY_CREDENTIALS_ID}"]) {
                    sh """
                        rsync -az --delete ./webappg2k/ ${DEPLOY_USER}@${DEPLOY_HOST}:${APP_DIR}
                        ssh ${DEPLOY_USER}@${DEPLOY_HOST} '
                            cd ${APP_DIR} &&
                            docker rm -f ${IMAGE_NAME} || true &&
                            docker image rm -f ${CONTAINER_IMAGE} || true &&
                            docker build -t ${CONTAINER_IMAGE} .
                        '
                    """
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                echo "üì§ Logging in and pushing image to Docker Hub..."
                sshagent(credentials: ["${SSH_KEY_CREDENTIALS_ID}"]) {
                    withCredentials([usernamePassword(credentialsId: "${DOCKERHUB_CREDENTIALS_ID}", usernameVariable: 'DOCKERHUB_USER', passwordVariable: 'DOCKERHUB_PASS')]) {
                        sh """
                            ssh ${DEPLOY_USER}@${DEPLOY_HOST} '
                                echo "${DOCKERHUB_PASS}" | docker login -u "${DOCKERHUB_USER}" --password-stdin &&
                                docker push ${CONTAINER_IMAGE} &&
                                docker logout || true
                            '
                        """
                    }
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                echo "üöÄ Running Docker container on remote server..."
                sshagent(credentials: ["${SSH_KEY_CREDENTIALS_ID}"]) {
                    sh """
                        ssh ${DEPLOY_USER}@${DEPLOY_HOST} '
                            docker rm -f ${IMAGE_NAME} || true &&
                            docker run -d --restart unless-stopped --name ${IMAGE_NAME} -p ${REMOTE_PORT}:${INTERNAL_PORT} ${CONTAINER_IMAGE}
                        '
                    """
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                echo "üîç Verifying deployment with retries..."
                script {
                    def maxRetries = 5
                    def waitTime = 5
                    def success = false
                    for (int i = 1; i <= maxRetries; i++) {
                        try {
                            sh "curl --fail --silent --show-error ${DEPLOY_URL} | head -30"
                            success = true
                            break
                        } catch (err) {
                            echo "Attempt ${i} failed, retrying in ${waitTime}s..."
                            sleep waitTime
                        }
                    }
                    if (!success) {
                        error("‚ùå Deployment verification failed after ${maxRetries} attempts")
                    }
                }
            }
        }
    }

    post {
        success {
            echo '‚úÖ D√©ploiement termin√© avec succ√®s !'
        }
        failure {
            echo '‚ùå Le pipeline a √©chou√©.'
        }
    }
}
